version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gestcyber-postgres
    environment:
      POSTGRES_DB: gestcyber
      POSTGRES_USER: gestcyber_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gestcyber_user -d gestcyber"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - gestcyber-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: gestcyber-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - gestcyber-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Application backend
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: gestcyber-backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      
      # Base de données
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: gestcyber
      DB_USER: gestcyber_user
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Authentification
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      
      # CORS et sécurité
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Services externes
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@gestcyber.com}
      
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      
      # Logs et monitoring
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: ${LOG_FILE:-logs/gestcyber.log}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: ${METRICS_PORT:-9090}
      
      # Upload et fichiers
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_DIR: ${UPLOAD_DIR:-uploads/}
      
    ports:
      - "5000:5000"
      - "9090:9090"  # Port pour les métriques Prometheus
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - gestcyber-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx reverse proxy et load balancer
  nginx:
    image: nginx:alpine
    container_name: gestcyber-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - gestcyber-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus pour la collecte de métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: gestcyber-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - gestcyber-network

  # Grafana pour la visualisation des métriques
  grafana:
    image: grafana/grafana:latest
    container_name: gestcyber-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - gestcyber-network

  # Elasticsearch pour la recherche et l'indexation (optionnel)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: gestcyber-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - gestcyber-network
    profiles:
      - full  # Activer avec --profile full

  # Kibana pour la visualisation des logs (optionnel)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: gestcyber-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - gestcyber-network
    profiles:
      - full  # Activer avec --profile full

  # Service de backup automatique
  backup:
    image: postgres:15-alpine
    container_name: gestcyber-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c '
        while true; do
          sleep 86400  # 24 heures
          /backup.sh
        done
      '
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - gestcyber-network
    profiles:
      - backup  # Activer avec --profile backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  gestcyber-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Configuration de l'orchestration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &default-restart-policy
  restart: unless-stopped